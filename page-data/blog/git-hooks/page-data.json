{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/git-hooks","result":{"data":{"markdownRemark":{"html":"<p>I've been using git for some years now, and have come up with a few methods to speed up my day-to-day workflow using\n<a href=\"https://git-scm.com/docs/githooks\">githooks</a>. These are small executable scripts you can write to trigger when you\nperform actions with git. For example, I like to keep local copies of each commit message I make to easily\ntrack my tasks done throughout the week. This can be especially helpful when working across multiple git repos.</p>\n<p>Here's is an example of how I this up:</p>\n<h3>1. Initialize Global Template</h3>\n<p>Firstly, I globally setup git to use templates from the directory <code>.git-templates</code>:</p>\n<pre><code class=\"language-shell\" data-meta=\"script\">git config --global init.templatedir '~/.git-templates'\n</code></pre>\n<h3>2. Add Hooks Directory</h3>\n<p>A <code>hooks</code> directory needs to be created. This is where all the global hooks can be stored:</p>\n<pre><code class=\"language-shell\" data-meta=\"script\">mkdir ~/.git-templates/hooks\n</code></pre>\n<h3>3. Write Your Hooks ðŸ˜Ž</h3>\n<p>Now you can write scripts inside the hooks directory. For logging all my commits I use gits log command and write it to file:</p>\n<pre><code class=\"language-shell\" data-meta=\"script\">#!/bin/sh\ngit log -1 > all_commits.txt\n</code></pre>\n<h3>4. Make Them Executable</h3>\n<p>Don't forget to make your hooks executable, otherwise they won't work!</p>\n<pre><code class=\"language-shell\" data-meta=\"script\">chmod +x ~/.git-templates/hooks/post-commit\n</code></pre>\n<h3>5. Reinitialize Your Git Repos</h3>\n<p>You also need to rerun <code>git init</code> in any existing git repos to get these new global updates. This won't get rid of any\nof local git hooks.</p>","frontmatter":{"date":"March 24, 2020","path":"/blog/git-hooks","title":"Git Hooks"}}},"pageContext":{}}}